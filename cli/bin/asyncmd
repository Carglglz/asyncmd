#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

import hashlib
import binascii
import sys
import os
import json
import logging
import argparse
import argcomplete
from argcomplete.completers import ChoicesCompleter
import asyncio
import asyncio_mqtt as aiomqtt
import ssl
from asyncmd.ota import OTAServer
from asyncmd.async_ota import AOTAServer
import yaml

_CONFIG_DIR = os.path.join(os.environ["HOME"], ".asyncmd")
_CONFIG_FILE = os.path.join(_CONFIG_DIR, "asyncmd.config")
_DEFAULT_ARGS = {
    "t": "device/{}/cmd",
    "m": "on",
    "d": "all",
    "ht": "localhost",
    "p": 1883,
    "cafile": "",
    "cert": "",
    "key": "",
    "dconf": ["get"],
    "f": [],
    "ff": ["micropython.bin"],
    "dslev": "info",
    "dflev": "error",
    "ota_cafile": "",
    "ota_cert": "",
    "ota_key": "",
    "ota_key_pph": "",
}


helparg = """Mode:
- pub : publish message to topic/s
- sub : subscribe to topic/s
- ota : do ota update
- otasrv: start ota async server
- sha: check hash (SHA256) of device current application firmware
- services: list aioservices
- dtop: device aioservices status with htop alike UI.
- devconfig: get or set device services.config
- config: configure default settings
"""

usag = """%(prog)s [Mode] [options]
"""
# UPY MODE KEYWORDS AND COMMANDS
keywords_mode = [
    "pub",
    "sub",
    "config",
    "ota",
    "otasrv",
    "sha",
    "services",
    "devconfig",
    "dtop",
]


def get_args(arg):
    if arg.isdecimal():
        if "." in arg:
            return float(arg)
        else:
            return int(arg)
    return arg


parser = argparse.ArgumentParser(
    prog="asyncmd",
    description="asyncmd CLI tool",
    formatter_class=argparse.RawTextHelpFormatter,
    usage=usag,
)
parser.version = "0.0.1"
parser.add_argument("cmd", metavar="Mode", help=helparg).completer = ChoicesCompleter(
    keywords_mode
)
parser.add_argument("-v", action="version")
parser.add_argument(
    "-c", action="store_true", required=False, default=False, help="check config file"
)
parser.add_argument(
    "--conf",
    required=False,
    default=_CONFIG_FILE,
    help="config file to use, default: ~/.asyncmd/asyncmd.config",
)
parser.add_argument(
    "--dconf",
    required=False,
    default=["get"],
    nargs="*",
    help="config options for devconfig: options: [get, set, enable, disable]",
)
parser.add_argument(
    "--args", required=False, nargs="*", help="args for devconfig", type=get_args
)
parser.add_argument(
    "--kwargs",
    required=False,
    help="kwargs for devconfig",
    type=yaml.safe_load,
)
parser.add_argument("--sub", required=False, help="override subscription topic")

parser.add_argument(
    "-ht",
    help="host",
    required=False,
    default=_DEFAULT_ARGS["ht"],
)
parser.add_argument(
    "-p", help="port", required=False, default=_DEFAULT_ARGS["p"], type=int
)
parser.add_argument(
    "-t",
    help="topic",
    required=False,
    default=_DEFAULT_ARGS["t"],
)

parser.add_argument(
    "-m",
    help="message",
    required=False,
    default=_DEFAULT_ARGS["m"],
)
parser.add_argument(
    "-d",
    help="device",
    required=False,
    default=_DEFAULT_ARGS["d"],
)
parser.add_argument(
    "-ff",
    help="firmware file/s, default: [micropython.bin]",
    required=False,
    nargs="*",
    default=_DEFAULT_ARGS["ff"],
)
parser.add_argument(
    "--cafile",
    help="CA cert",
    required=False,
    default="",
)

parser.add_argument(
    "--key",
    help="client key",
    required=False,
    default="",
)
parser.add_argument(
    "--cert",
    help="client cert",
    required=False,
    default="",
)

parser.add_argument(
    "--ota-cafile",
    help="OTA server CA cert",
    required=False,
    default="",
)

parser.add_argument(
    "--ota-key",
    help="OTA server key",
    required=False,
    default="",
)
parser.add_argument(
    "--ota-key-pph",
    help="OTA server key passphrase",
    required=False,
    default="",
)
parser.add_argument(
    "--ota-cert",
    help="OTA server cert",
    required=False,
    default="",
)
parser.add_argument(
    "-f",
    help="Force default configuration of any argument",
    required=False,
    nargs="?",
    const=["m", "t", "d", "ff"],
    default=[],
)
parser.add_argument(
    "-dflev",
    help="debug file mode level, options [debug, info, warning, error, critical]",
    default="error",
)
parser.add_argument(
    "-dslev",
    help="debug sys out mode level, options [debug, info, warning, error, critical]",
    default="info",
)

argcomplete.autocomplete(parser)
args = parser.parse_args()
args.t = args.t.format(args.d)
argconf = dict(args.__dict__)
argconf.pop("cmd")
argconf.pop("f")
argconf.pop("c")
argconf.pop("conf")
argconf.pop("kwargs")
argconf.pop("args")
argconf.pop("sub")


# PARSE YAML CONFIG FILE
def parse_config_file(config_file):
    with open(config_file, "r") as tf:
        _conf = tf.read()
    return yaml.safe_load(_conf)


# LOAD CONFIG
if not os.path.exists(_CONFIG_DIR):
    os.mkdir(_CONFIG_DIR)
else:
    # print(argconf)
    # print(args.__dict__)
    # print(_DEFAULT_ARGS)
    if args.conf != _CONFIG_FILE:
        _CONFIG_FILE = args.conf
    if os.path.exists(_CONFIG_FILE):  # LOAD_CONFIG
        # with open(_CONFIG_FILE, "r") as configf:
        #     load_conf = json.loads(configf.read())
        load_conf = parse_config_file(_CONFIG_FILE)
        for key in load_conf.keys():
            if (
                argconf[key] == _DEFAULT_ARGS[key]
            ):  # IF args are default fallback to configuration
                if key not in args.f:
                    args.__dict__[key] = load_conf[key]
                    argconf[key] = load_conf[key]


# LOGGING
log_levels = {
    "debug": logging.DEBUG,
    "info": logging.INFO,
    "warning": logging.WARNING,
    "error": logging.ERROR,
    "critical": logging.CRITICAL,
}
logPath = _CONFIG_DIR
logfileName = "asyncmd"
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(log_levels[args.dslev])
logging.basicConfig(
    level=log_levels["info"],
    format=("%(asctime)s [%(name)s] [%(levelname)s] %(message)s"),
    handlers=[handler],
)
log = logging.getLogger("asyncmd")

# Filehandler for error
fh_err = logging.FileHandler(f"{logPath}/{logfileName}.log")
fh_err.setLevel(log_levels[args.dflev])
# Formatter for errors
fmt_err = logging.Formatter("%(asctime)s [%(name)s] [%(levelname)s] %(message)s")
fh_err.setFormatter(fmt_err)
log.addHandler(fh_err)


def get_sha256(file):
    try:
        with open(file, "rb") as fwf:
            sha = hashlib.sha256(fwf.read())
            res = binascii.hexlify(sha.digest()).decode()

    except Exception:
        return

    return res


async def _pub(args, log, tls_params=None):
    async with aiomqtt.Client(
        hostname=args.ht, port=args.p, logger=log, tls_params=tls_params
    ) as client:
        await client.publish(args.t, payload=args.m)


async def _sub(args, log, tls_params=None):
    async with aiomqtt.Client(
        hostname=args.ht, port=args.p, logger=log, tls_params=tls_params
    ) as client:
        async with client.messages() as messages:
            await client.subscribe(args.t)
            async for message in messages:
                log.info(f"[{message.topic}]" f" {message.payload.decode()}")


async def _ota(args, log, tls_params=None, ota_tls_params={}):
    async with aiomqtt.Client(
        hostname=args.ht, port=args.p, logger=log, tls_params=tls_params
    ) as client:
        ota_server = OTAServer(
            client, 8014, args.t, args.ff[0], log, tls_params=ota_tls_params
        )
        await ota_server.start_ota()


async def async_ota(args, log, tls_params=None, ota_tls_params={}):
    tasks = set()
    interval = 5

    while True:
        try:
            async with aiomqtt.Client(
                hostname=args.ht, port=args.p, logger=log, tls_params=tls_params
            ) as client:
                ota_server = AOTAServer(
                    client,
                    8014,
                    args.t,
                    args.ff,
                    log,
                    tls_params=ota_tls_params,
                )
                ota_task = asyncio.create_task(ota_server.start_ota_server())
                check_sha_task = asyncio.create_task(
                    check_fw_sha(args, log, client, ota_server)
                )

                otaserv_sha_task = asyncio.create_task(
                    ota_sha_check_listen(args, log, ota_server, tls_params)
                )
                tasks.add(ota_task)
                tasks.add(check_sha_task)
                tasks.add(otaserv_sha_task)
                # add ota_check listener
                await asyncio.gather(*tasks)
        except aiomqtt.MqttError:
            log.error(f"Connection lost; Reconnecting in {interval} seconds ...")
            log.info("Cleaning tasks...")
            for _tsk in tasks:
                try:
                    _tsk.cancel()
                    await _tsk
                except asyncio.CancelledError:
                    pass
                except Exception as e:
                    log.error(e)
            tasks.clear()

            await asyncio.sleep(interval)


async def ota_sha_check_listen(args, log, server, tls_params=None):
    # separate client
    n_req = 0

    async with aiomqtt.Client(
        hostname=args.ht, port=args.p, logger=log, tls_params=tls_params
    ) as client:
        async with client.messages() as messages:
            await client.subscribe("device/+/otacheck")
            async for message in messages:
                # log check from device x with firmware sha:
                # old sha then publish
                n_req += 1
                devname = str(message.topic).split("/")[1]
                # device ota request --> sha only --> default fwmfile -->
                # args.ff[0]
                # if sha + filename --> register device
                # needs to send ip too
                try:
                    sha_file = json.loads(message.payload.decode())
                except Exception:
                    sha_file = {
                        "sha": message.payload.decode(),
                        "fwfile": args.ff[0],
                        "ip": None,
                    }

                if sha_file["fwfile"] in ["", None]:
                    sha_file["fwfile"] = args.ff[0]

                if sha_file["fwfile"] not in server.check_sha:
                    log.error(
                        f"OTA request from {devname}: FILE "
                        f": {sha_file['fwfile']} not available"
                    )
                    continue

                log.info(
                    f"OTA request from {devname}: FILE: "
                    f"{os.path.relpath(sha_file['fwfile'])}"
                )
                log.info(f"OTA request from {devname}: SHA: {sha_file['sha']}")

                # get device from topic
                # publish to device/{name}/ota

                server.register_device(devname, sha_file)

                # log.info(server._device_register)
                fwm_msg = "up to date"
                if sha_file["sha"] != server.check_sha[sha_file["fwfile"]]:
                    fwm_msg = "new"
                    log.info(
                        f"New firmware for {devname}: SHA: "
                        f"{server.check_sha[sha_file['fwfile']]}"
                    )
                    await client.publish(
                        str(message.topic).replace("otacheck", "ota"),
                        payload=json.dumps(
                            {
                                "host": server.host,
                                "port": server.port,
                                "sha": server.check_sha[sha_file["fwfile"]],
                                "blocks": server._fw_files[sha_file["fwfile"]][
                                    "n_blocks"
                                ],
                                "bg": server._bg,
                                "fwfile": sha_file["fwfile"],
                            }
                        ),
                    )
                else:
                    log.info(f"{devname} Firmware Up to date")

                # report requestf
                await client.publish(
                    f"device/{devname}/otasrv",
                    payload=json.dumps(
                        {
                            "hostname": devname,
                            "ota_msg": fwm_msg,
                            "n_req": n_req,
                            "sha": server.check_sha[sha_file["fwfile"]],
                        }
                    ),
                )


async def check_fw_sha(args, log, client, server):
    fwfiles = [file for file in args.ff if os.path.exists(file)]
    fw_mtime = {
        fwfile: int(os.path.getmtime(fwfile))
        for fwfile in fwfiles
        if os.path.exists(fwfile)
    }
    fw_sha = {
        fwfile: get_sha256(fwfile) for fwfile in fwfiles if os.path.exists(fwfile)
    }
    while True:
        for fwfile in fwfiles:
            mod_time = 0
            try:
                mod_time = int(os.path.getmtime(fwfile))
            except Exception:
                pass
            if fw_mtime[fwfile] != mod_time:
                fw_mtime[fwfile] = mod_time
                # check sha
                c_fw_sha = get_sha256(fwfile)
                if fw_sha[fwfile] != c_fw_sha and c_fw_sha is not None:
                    fw_sha[fwfile] = c_fw_sha
                    log.info("New or modified firmware file detected")
                    log.info(f"{os.path.relpath(fwfile)}: SHA256: {fw_sha[fwfile]}")
                    log.info("Sending notification...")
                    server.update_sha(fwfile)  # fix this
                    await client.publish(
                        args.t,
                        payload=json.dumps(
                            {
                                "host": server.host,
                                "port": server.port,
                                "sha": server.check_sha[fwfile],
                                "blocks": server._fw_files[fwfile]["n_blocks"],
                                "bg": server._bg,
                                "fwfile": fwfile,
                            }
                        ),
                    )

                # test
                elif c_fw_sha is None:
                    fw_sha[fwfile] = c_fw_sha

        await asyncio.sleep(5)


async def check_device_sha(args, log, tls_params):
    pub_topic = f"device/{args.d}/ota"
    _msg = "check"

    if args.d == "all":
        args.d = "+"
    sub_topic = f"device/{args.d}/otacheck"

    async with aiomqtt.Client(
        hostname=args.ht, port=args.p, logger=log, tls_params=tls_params
    ) as client:
        async with client.messages() as messages:
            await client.subscribe(sub_topic)
            await client.publish(pub_topic, payload=_msg)
            async for message in messages:
                devname = str(message.topic).split("/")[1]
                log.info(f"[{devname}] SHA: {message.payload.decode()}")


async def get_services(args, log, tls_params):
    pub_topic = f"device/{args.d}/service"
    _msg = '{"status": "*.service"}'

    if args.d == "all":
        args.d = "+"
    sub_topic = f"device/{args.d}/status"

    async with aiomqtt.Client(
        hostname=args.ht, port=args.p, logger=log, tls_params=tls_params
    ) as client:
        async with client.messages() as messages:
            await client.subscribe(sub_topic)
            await client.publish(pub_topic, payload=_msg)
            async for message in messages:
                devname = str(message.topic).split("/")[1]
                log.info(f"[{devname}] Services @ {devname} ")
                for k, v in json.loads(message.payload.decode()).items():
                    if k.endswith(".service"):
                        pprint_status(k, v["status"])


def pprint_status(service, status):
    if status == "running":
        _dot = "\033[92m●\x1b[0m"
        print(f"{_dot} {service}: status: \033[92m{status}\x1b[0m ")

    elif status == "error":
        _err = "failed"
        _status = f"\u001b[31;1m{_err}\u001b[0m"
        _dot = "\u001b[31;1m●\u001b[0m"
        print(f"{_dot} {service}: status: {_status}")

    elif status == "done":
        _dot = "●"
        print(f"{_dot} {service}: status: {status}")

    elif status == "stopped":
        _status = "\u001b[33;1mstopped\u001b[0m"
        _dot = "\u001b[33;1m●\u001b[0m"
        print(f"{_dot} {service}: status: {_status}")

    elif "scheduled" in status:
        _status = "scheduled"
        _dot = "\u001b[36m●\u001b[0m"
        print(f"{_dot} {service}: status: {status}")


async def dev_config(args, log, tls_params):
    pub_topic = f"device/{args.d}/service"
    act = args.dconf[0]
    if act == "get":
        if len(args.dconf) == 1:
            _serv = "*"
        else:
            _serv = args.dconf[1]
        _serv = _serv.replace(".service", "")
        _msg = json.dumps({"config": {"get": _serv}})

    elif act in ["set", "enable", "disable"]:
        _serv = args.dconf[1]
        _configf = False
        if os.path.exists(_serv):
            _configf = parse_config_file(_serv)
        else:  # device services.config file
            _serv = _serv.replace(".service", "")
        if act in ["enable", "disable"]:
            _msg = json.dumps({"config": {act: _serv}})
        else:
            if not _configf:
                if args.kwargs is None:
                    args.kwargs = {}
                if args.args is None:
                    args.args = []
                _msg = json.dumps(
                    {
                        "config": {
                            act: {
                                _serv: {
                                    "args": args.args,
                                    "kwargs": args.kwargs,
                                }
                            }
                        }
                    }
                )
            else:
                enabled_servs = {
                    serv: {
                        "args": _configf[serv].get("args", []),
                        "kwargs": _configf[serv].get("kwargs", {}),
                    }
                    for serv in _configf
                    if _configf[serv].get("enabled", False)
                }
                _msg = json.dumps({"config": {act: enabled_servs}})

    if args.d == "all":
        args.d = "+"
    if args.sub:
        args.d = args.sub
    sub_topic = f"device/{args.d}/config"

    async with aiomqtt.Client(
        hostname=args.ht, port=args.p, logger=log, tls_params=tls_params
    ) as client:
        async with client.messages() as messages:
            await client.subscribe(sub_topic)
            await client.publish(pub_topic, payload=_msg)
            if act in ["set", "enable", "disable"]:
                log.info(f"[{args.d}] {_serv} config {act} {_msg} ")
                return
            if act == "get":
                async for message in messages:
                    devname = str(message.topic).split("/")[1]
                    log.info(f"[{devname}] {_serv} config @ {devname} ")
                    if _serv != "*":
                        print(yaml.dump({_serv: json.loads(message.payload.decode())}))
                    else:
                        print(yaml.dump(json.loads(message.payload.decode())))


def main(log):
    # print(argconf)
    # print(args.__dict__)
    # print(_DEFAULT_ARGS)
    if args.cmd == "config":
        if args.c:
            configf = parse_config_file(_CONFIG_FILE)
            print(yaml.dump(configf))

            return
        with open(_CONFIG_FILE, "w") as configf:
            configf.write(yaml.dump(argconf))
            return

    tls_params = None
    ota_tls_params = {}
    if args.cafile:
        tls_params = aiomqtt.TLSParameters(
            ca_certs=args.cafile,
            certfile=args.cert,
            keyfile=args.key,
            cert_reqs=ssl.CERT_REQUIRED,
            tls_version=ssl.PROTOCOL_TLS,
            ciphers=None,
        )
    if args.ota_cafile:
        ota_tls_params = {
            "cafile": args.ota_cafile,
            "cert": args.ota_cert,
            "key": args.ota_key,
            "pph": args.ota_key_pph,
        }

    if args.cmd not in keywords_mode:
        args.m = args.cmd
        args.cmd = "pub"

    if args.cmd == "pub":
        log.info(f"pub @ [{args.t}] {args.m}")
        asyncio.run(_pub(args, log, tls_params))

    elif args.cmd == "sub":
        log.info(f"sub @ [{args.t}]")
        asyncio.run(_sub(args, log, tls_params))

    elif args.cmd == "ota":
        args.t = args.t.replace("cmd", "ota")
        log.info(f"ota @ [{args.t}]")
        asyncio.run(_ota(args, log, tls_params, ota_tls_params))

    elif args.cmd == "otasrv":
        args.t = args.t.replace("cmd", "ota")
        args.t = args.t.replace("all", args.d)
        log.info(f"aota @ [{args.t}]")
        asyncio.run(async_ota(args, log, tls_params, ota_tls_params))

    elif args.cmd == "sha":
        log.info(f"sha @ [{args.d}]")
        asyncio.run(check_device_sha(args, log, tls_params))

    elif args.cmd == "services":
        log.info(f"services @ [{args.d}]")
        asyncio.run(get_services(args, log, tls_params))

    elif args.cmd == "devconfig":
        log.info(f"devconfig @ [{args.d}]")
        asyncio.run(dev_config(args, log, tls_params))

    elif args.cmd == "dtop":
        from asyncmd.dtop import DeviceTOP
        import curses

        dev_top = DeviceTOP(args)
        curses.wrapper(dev_top.start, 5)


if __name__ == "__main__":
    try:
        main(log)
    except KeyboardInterrupt:
        log.info("exit")
